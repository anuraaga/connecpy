# -*- coding: utf-8 -*-
# Generated by https://github.com/i2y/connecpy/protoc-gen-connecpy.  DO NOT EDIT!
# source: haberdasher.proto

from typing import Iterable, Optional, Protocol, Union

import httpx

from connecpy.asgi import ConnecpyASGIApplication
from connecpy.async_client import AsyncConnecpyClient
from connecpy.base import Endpoint
from connecpy.errors import Errors
from connecpy.exceptions import ConnecpyServerException
from connecpy.interceptor import AsyncConnecpyServerInterceptor
from connecpy.client import ConnecpyClient
from connecpy.context import ServiceContext
from connecpy.types import Headers
from connecpy.wsgi import ConnecpyWSGIApplication
import google.protobuf.empty_pb2 as google_dot_protobuf_dot_empty__pb2
import haberdasher_pb2 as haberdasher__pb2


class Haberdasher(Protocol):
    async def MakeHat(
        self, req: haberdasher__pb2.Size, ctx: ServiceContext
    ) -> haberdasher__pb2.Hat:
        raise ConnecpyServerException(
            code=Errors.Unimplemented, message="Not implemented"
        )

    async def DoNothing(
        self, req: google_dot_protobuf_dot_empty__pb2.Empty, ctx: ServiceContext
    ) -> google_dot_protobuf_dot_empty__pb2.Empty:
        raise ConnecpyServerException(
            code=Errors.Unimplemented, message="Not implemented"
        )


class HaberdasherASGIApplication(ConnecpyASGIApplication):
    def __init__(
        self,
        service: Haberdasher,
        *,
        interceptors: Iterable[AsyncConnecpyServerInterceptor] = (),
        max_receive_message_length=1024 * 100 * 100,
    ):
        super().__init__(
            path="/i2y.connecpy.example.Haberdasher",
            endpoints={
                "/i2y.connecpy.example.Haberdasher/MakeHat": Endpoint[
                    haberdasher__pb2.Size, haberdasher__pb2.Hat
                ](
                    service_name="Haberdasher",
                    name="MakeHat",
                    function=getattr(service, "MakeHat"),
                    input=haberdasher__pb2.Size,
                    output=haberdasher__pb2.Hat,
                    allowed_methods=("GET", "POST"),
                ),
                "/i2y.connecpy.example.Haberdasher/DoNothing": Endpoint[
                    google_dot_protobuf_dot_empty__pb2.Empty,
                    google_dot_protobuf_dot_empty__pb2.Empty,
                ](
                    service_name="Haberdasher",
                    name="DoNothing",
                    function=getattr(service, "DoNothing"),
                    input=google_dot_protobuf_dot_empty__pb2.Empty,
                    output=google_dot_protobuf_dot_empty__pb2.Empty,
                    allowed_methods=("POST",),
                ),
            },
            interceptors=interceptors,
            max_receive_message_length=max_receive_message_length,
        )

    @property
    def service_name(self):
        return "i2y.connecpy.example.Haberdasher"


class HaberdasherSync(Protocol):
    def MakeHat(
        self, req: haberdasher__pb2.Size, ctx: ServiceContext
    ) -> haberdasher__pb2.Hat:
        raise ConnecpyServerException(
            code=Errors.Unimplemented, message="Not implemented"
        )

    def DoNothing(
        self, req: google_dot_protobuf_dot_empty__pb2.Empty, ctx: ServiceContext
    ) -> google_dot_protobuf_dot_empty__pb2.Empty:
        raise ConnecpyServerException(
            code=Errors.Unimplemented, message="Not implemented"
        )


class HaberdasherWSGIApplication(ConnecpyWSGIApplication):
    def __init__(self, service: HaberdasherSync):
        super().__init__(
            path="/i2y.connecpy.example.Haberdasher",
            endpoints={
                "/i2y.connecpy.example.Haberdasher/MakeHat": Endpoint[
                    haberdasher__pb2.Size, haberdasher__pb2.Hat
                ](
                    service_name="Haberdasher",
                    name="MakeHat",
                    function=getattr(service, "MakeHat"),
                    input=haberdasher__pb2.Size,
                    output=haberdasher__pb2.Hat,
                    allowed_methods=("GET", "POST"),
                ),
                "/i2y.connecpy.example.Haberdasher/DoNothing": Endpoint[
                    google_dot_protobuf_dot_empty__pb2.Empty,
                    google_dot_protobuf_dot_empty__pb2.Empty,
                ](
                    service_name="Haberdasher",
                    name="DoNothing",
                    function=getattr(service, "DoNothing"),
                    input=google_dot_protobuf_dot_empty__pb2.Empty,
                    output=google_dot_protobuf_dot_empty__pb2.Empty,
                    allowed_methods=("POST",),
                ),
            },
        )

    @property
    def service_name(self):
        return "i2y.connecpy.example.Haberdasher"


class HaberdasherClient(ConnecpyClient):
    def MakeHat(
        self,
        request: haberdasher__pb2.Size,
        *,
        headers: Optional[Headers] = None,
        timeout_ms: Optional[int] = None,
        server_path_prefix: str = "",
        use_get: bool = False,
    ) -> haberdasher__pb2.Hat:
        method = "GET" if use_get else "POST"
        return self._make_request(
            url=f"{server_path_prefix}/i2y.connecpy.example.Haberdasher/MakeHat",
            method=method,
            headers=headers,
            timeout_ms=timeout_ms,
            request=request,
            response_class=haberdasher__pb2.Hat,
        )

    def DoNothing(
        self,
        request: google_dot_protobuf_dot_empty__pb2.Empty,
        *,
        headers: Optional[Headers] = None,
        timeout_ms: Optional[int] = None,
        server_path_prefix: str = "",
    ) -> google_dot_protobuf_dot_empty__pb2.Empty:
        method = "POST"
        return self._make_request(
            url=f"{server_path_prefix}/i2y.connecpy.example.Haberdasher/DoNothing",
            method=method,
            headers=headers,
            timeout_ms=timeout_ms,
            request=request,
            response_class=google_dot_protobuf_dot_empty__pb2.Empty,
        )


class AsyncHaberdasherClient(AsyncConnecpyClient):
    async def MakeHat(
        self,
        request: haberdasher__pb2.Size,
        *,
        headers: Optional[Headers] = None,
        timeout_ms: Optional[int] = None,
        server_path_prefix: str = "",
        session: Union[httpx.AsyncClient, None] = None,
        use_get: bool = False,
    ) -> haberdasher__pb2.Hat:
        method = "GET" if use_get else "POST"
        return await self._make_request(
            url=f"{server_path_prefix}/i2y.connecpy.example.Haberdasher/MakeHat",
            method=method,
            headers=headers,
            request=request,
            timeout_ms=timeout_ms,
            response_class=haberdasher__pb2.Hat,
            session=session,
        )

    async def DoNothing(
        self,
        request: google_dot_protobuf_dot_empty__pb2.Empty,
        *,
        headers: Optional[Headers] = None,
        timeout_ms: Optional[int] = None,
        server_path_prefix: str = "",
        session: Union[httpx.AsyncClient, None] = None,
    ) -> google_dot_protobuf_dot_empty__pb2.Empty:
        method = "POST"
        return await self._make_request(
            url=f"{server_path_prefix}/i2y.connecpy.example.Haberdasher/DoNothing",
            method=method,
            headers=headers,
            request=request,
            timeout_ms=timeout_ms,
            response_class=google_dot_protobuf_dot_empty__pb2.Empty,
            session=session,
        )
