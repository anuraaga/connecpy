# -*- coding: utf-8 -*-
# Generated by https://github.com/i2y/connecpy/protoc-gen-connecpy.  DO NOT EDIT!
# source: connectrpc/conformance/v1/service.proto

from typing import Optional, Protocol, Union

import httpx

from connecpy.async_client import AsyncConnecpyClient
from connecpy.base import Endpoint
from connecpy.server import ConnecpyServer
from connecpy.client import ConnecpyClient
from connecpy.context import ClientContext, ServiceContext
import connectrpc.conformance.v1.service_pb2 as connectrpc_dot_conformance_dot_v1_dot_service__pb2


class ConformanceService(Protocol):
    async def Unary(
        self,
        req: connectrpc_dot_conformance_dot_v1_dot_service__pb2.UnaryRequest,
        ctx: ServiceContext,
    ) -> connectrpc_dot_conformance_dot_v1_dot_service__pb2.UnaryResponse: ...
    async def ServerStream(
        self,
        req: connectrpc_dot_conformance_dot_v1_dot_service__pb2.ServerStreamRequest,
        ctx: ServiceContext,
    ) -> connectrpc_dot_conformance_dot_v1_dot_service__pb2.ServerStreamResponse: ...
    async def ClientStream(
        self,
        req: connectrpc_dot_conformance_dot_v1_dot_service__pb2.ClientStreamRequest,
        ctx: ServiceContext,
    ) -> connectrpc_dot_conformance_dot_v1_dot_service__pb2.ClientStreamResponse: ...
    async def BidiStream(
        self,
        req: connectrpc_dot_conformance_dot_v1_dot_service__pb2.BidiStreamRequest,
        ctx: ServiceContext,
    ) -> connectrpc_dot_conformance_dot_v1_dot_service__pb2.BidiStreamResponse: ...
    async def Unimplemented(
        self,
        req: connectrpc_dot_conformance_dot_v1_dot_service__pb2.UnimplementedRequest,
        ctx: ServiceContext,
    ) -> connectrpc_dot_conformance_dot_v1_dot_service__pb2.UnimplementedResponse: ...
    async def IdempotentUnary(
        self,
        req: connectrpc_dot_conformance_dot_v1_dot_service__pb2.IdempotentUnaryRequest,
        ctx: ServiceContext,
    ) -> connectrpc_dot_conformance_dot_v1_dot_service__pb2.IdempotentUnaryResponse: ...


class ConformanceServiceServer(ConnecpyServer):
    def __init__(self, *, service: ConformanceService, server_path_prefix=""):
        super().__init__()
        self._prefix = (
            f"{server_path_prefix}/connectrpc.conformance.v1.ConformanceService"
        )
        self._endpoints = {
            "Unary": Endpoint[
                connectrpc_dot_conformance_dot_v1_dot_service__pb2.UnaryRequest,
                connectrpc_dot_conformance_dot_v1_dot_service__pb2.UnaryResponse,
            ](
                service_name="ConformanceService",
                name="Unary",
                function=getattr(service, "Unary"),
                input=connectrpc_dot_conformance_dot_v1_dot_service__pb2.UnaryRequest,
                output=connectrpc_dot_conformance_dot_v1_dot_service__pb2.UnaryResponse,
                allowed_methods=("POST",),
            ),
            "ServerStream": Endpoint[
                connectrpc_dot_conformance_dot_v1_dot_service__pb2.ServerStreamRequest,
                connectrpc_dot_conformance_dot_v1_dot_service__pb2.ServerStreamResponse,
            ](
                service_name="ConformanceService",
                name="ServerStream",
                function=getattr(service, "ServerStream"),
                input=connectrpc_dot_conformance_dot_v1_dot_service__pb2.ServerStreamRequest,
                output=connectrpc_dot_conformance_dot_v1_dot_service__pb2.ServerStreamResponse,
                allowed_methods=("POST",),
            ),
            "ClientStream": Endpoint[
                connectrpc_dot_conformance_dot_v1_dot_service__pb2.ClientStreamRequest,
                connectrpc_dot_conformance_dot_v1_dot_service__pb2.ClientStreamResponse,
            ](
                service_name="ConformanceService",
                name="ClientStream",
                function=getattr(service, "ClientStream"),
                input=connectrpc_dot_conformance_dot_v1_dot_service__pb2.ClientStreamRequest,
                output=connectrpc_dot_conformance_dot_v1_dot_service__pb2.ClientStreamResponse,
                allowed_methods=("POST",),
            ),
            "BidiStream": Endpoint[
                connectrpc_dot_conformance_dot_v1_dot_service__pb2.BidiStreamRequest,
                connectrpc_dot_conformance_dot_v1_dot_service__pb2.BidiStreamResponse,
            ](
                service_name="ConformanceService",
                name="BidiStream",
                function=getattr(service, "BidiStream"),
                input=connectrpc_dot_conformance_dot_v1_dot_service__pb2.BidiStreamRequest,
                output=connectrpc_dot_conformance_dot_v1_dot_service__pb2.BidiStreamResponse,
                allowed_methods=("POST",),
            ),
            "Unimplemented": Endpoint[
                connectrpc_dot_conformance_dot_v1_dot_service__pb2.UnimplementedRequest,
                connectrpc_dot_conformance_dot_v1_dot_service__pb2.UnimplementedResponse,
            ](
                service_name="ConformanceService",
                name="Unimplemented",
                function=getattr(service, "Unimplemented"),
                input=connectrpc_dot_conformance_dot_v1_dot_service__pb2.UnimplementedRequest,
                output=connectrpc_dot_conformance_dot_v1_dot_service__pb2.UnimplementedResponse,
                allowed_methods=("POST",),
            ),
            "IdempotentUnary": Endpoint[
                connectrpc_dot_conformance_dot_v1_dot_service__pb2.IdempotentUnaryRequest,
                connectrpc_dot_conformance_dot_v1_dot_service__pb2.IdempotentUnaryResponse,
            ](
                service_name="ConformanceService",
                name="IdempotentUnary",
                function=getattr(service, "IdempotentUnary"),
                input=connectrpc_dot_conformance_dot_v1_dot_service__pb2.IdempotentUnaryRequest,
                output=connectrpc_dot_conformance_dot_v1_dot_service__pb2.IdempotentUnaryResponse,
                allowed_methods=("GET", "POST"),
            ),
        }

    def serviceName(self):
        return "connectrpc.conformance.v1.ConformanceService"


class ConformanceServiceSync(Protocol):
    def Unary(
        self,
        req: connectrpc_dot_conformance_dot_v1_dot_service__pb2.UnaryRequest,
        ctx: ServiceContext,
    ) -> connectrpc_dot_conformance_dot_v1_dot_service__pb2.UnaryResponse: ...
    def ServerStream(
        self,
        req: connectrpc_dot_conformance_dot_v1_dot_service__pb2.ServerStreamRequest,
        ctx: ServiceContext,
    ) -> connectrpc_dot_conformance_dot_v1_dot_service__pb2.ServerStreamResponse: ...
    def ClientStream(
        self,
        req: connectrpc_dot_conformance_dot_v1_dot_service__pb2.ClientStreamRequest,
        ctx: ServiceContext,
    ) -> connectrpc_dot_conformance_dot_v1_dot_service__pb2.ClientStreamResponse: ...
    def BidiStream(
        self,
        req: connectrpc_dot_conformance_dot_v1_dot_service__pb2.BidiStreamRequest,
        ctx: ServiceContext,
    ) -> connectrpc_dot_conformance_dot_v1_dot_service__pb2.BidiStreamResponse: ...
    def Unimplemented(
        self,
        req: connectrpc_dot_conformance_dot_v1_dot_service__pb2.UnimplementedRequest,
        ctx: ServiceContext,
    ) -> connectrpc_dot_conformance_dot_v1_dot_service__pb2.UnimplementedResponse: ...
    def IdempotentUnary(
        self,
        req: connectrpc_dot_conformance_dot_v1_dot_service__pb2.IdempotentUnaryRequest,
        ctx: ServiceContext,
    ) -> connectrpc_dot_conformance_dot_v1_dot_service__pb2.IdempotentUnaryResponse: ...


class ConformanceServiceServerSync(ConnecpyServer):
    def __init__(self, *, service: ConformanceServiceSync, server_path_prefix=""):
        super().__init__()
        self._prefix = (
            f"{server_path_prefix}/connectrpc.conformance.v1.ConformanceService"
        )
        self._endpoints = {
            "Unary": Endpoint[
                connectrpc_dot_conformance_dot_v1_dot_service__pb2.UnaryRequest,
                connectrpc_dot_conformance_dot_v1_dot_service__pb2.UnaryResponse,
            ](
                service_name="ConformanceService",
                name="Unary",
                function=getattr(service, "Unary"),
                input=connectrpc_dot_conformance_dot_v1_dot_service__pb2.UnaryRequest,
                output=connectrpc_dot_conformance_dot_v1_dot_service__pb2.UnaryResponse,
                allowed_methods=("POST",),
            ),
            "ServerStream": Endpoint[
                connectrpc_dot_conformance_dot_v1_dot_service__pb2.ServerStreamRequest,
                connectrpc_dot_conformance_dot_v1_dot_service__pb2.ServerStreamResponse,
            ](
                service_name="ConformanceService",
                name="ServerStream",
                function=getattr(service, "ServerStream"),
                input=connectrpc_dot_conformance_dot_v1_dot_service__pb2.ServerStreamRequest,
                output=connectrpc_dot_conformance_dot_v1_dot_service__pb2.ServerStreamResponse,
                allowed_methods=("POST",),
            ),
            "ClientStream": Endpoint[
                connectrpc_dot_conformance_dot_v1_dot_service__pb2.ClientStreamRequest,
                connectrpc_dot_conformance_dot_v1_dot_service__pb2.ClientStreamResponse,
            ](
                service_name="ConformanceService",
                name="ClientStream",
                function=getattr(service, "ClientStream"),
                input=connectrpc_dot_conformance_dot_v1_dot_service__pb2.ClientStreamRequest,
                output=connectrpc_dot_conformance_dot_v1_dot_service__pb2.ClientStreamResponse,
                allowed_methods=("POST",),
            ),
            "BidiStream": Endpoint[
                connectrpc_dot_conformance_dot_v1_dot_service__pb2.BidiStreamRequest,
                connectrpc_dot_conformance_dot_v1_dot_service__pb2.BidiStreamResponse,
            ](
                service_name="ConformanceService",
                name="BidiStream",
                function=getattr(service, "BidiStream"),
                input=connectrpc_dot_conformance_dot_v1_dot_service__pb2.BidiStreamRequest,
                output=connectrpc_dot_conformance_dot_v1_dot_service__pb2.BidiStreamResponse,
                allowed_methods=("POST",),
            ),
            "Unimplemented": Endpoint[
                connectrpc_dot_conformance_dot_v1_dot_service__pb2.UnimplementedRequest,
                connectrpc_dot_conformance_dot_v1_dot_service__pb2.UnimplementedResponse,
            ](
                service_name="ConformanceService",
                name="Unimplemented",
                function=getattr(service, "Unimplemented"),
                input=connectrpc_dot_conformance_dot_v1_dot_service__pb2.UnimplementedRequest,
                output=connectrpc_dot_conformance_dot_v1_dot_service__pb2.UnimplementedResponse,
                allowed_methods=("POST",),
            ),
            "IdempotentUnary": Endpoint[
                connectrpc_dot_conformance_dot_v1_dot_service__pb2.IdempotentUnaryRequest,
                connectrpc_dot_conformance_dot_v1_dot_service__pb2.IdempotentUnaryResponse,
            ](
                service_name="ConformanceService",
                name="IdempotentUnary",
                function=getattr(service, "IdempotentUnary"),
                input=connectrpc_dot_conformance_dot_v1_dot_service__pb2.IdempotentUnaryRequest,
                output=connectrpc_dot_conformance_dot_v1_dot_service__pb2.IdempotentUnaryResponse,
                allowed_methods=("GET", "POST"),
            ),
        }

    def serviceName(self):
        return "connectrpc.conformance.v1.ConformanceService"


class ConformanceServiceClient(ConnecpyClient):
    def Unary(
        self,
        request: connectrpc_dot_conformance_dot_v1_dot_service__pb2.UnaryRequest,
        *,
        ctx: Optional[ClientContext] = None,
        server_path_prefix: str = "",
        **kwargs,
    ) -> connectrpc_dot_conformance_dot_v1_dot_service__pb2.UnaryResponse:
        method = "POST"
        return self._make_request(
            url=f"{server_path_prefix}/connectrpc.conformance.v1.ConformanceService/Unary",
            ctx=ctx,
            request=request,
            response_class=connectrpc_dot_conformance_dot_v1_dot_service__pb2.UnaryResponse,
            method=method,
            **kwargs,
        )

    def ServerStream(
        self,
        request: connectrpc_dot_conformance_dot_v1_dot_service__pb2.ServerStreamRequest,
        *,
        ctx: Optional[ClientContext] = None,
        server_path_prefix: str = "",
        **kwargs,
    ) -> connectrpc_dot_conformance_dot_v1_dot_service__pb2.ServerStreamResponse:
        method = "POST"
        return self._make_request(
            url=f"{server_path_prefix}/connectrpc.conformance.v1.ConformanceService/ServerStream",
            ctx=ctx,
            request=request,
            response_class=connectrpc_dot_conformance_dot_v1_dot_service__pb2.ServerStreamResponse,
            method=method,
            **kwargs,
        )

    def ClientStream(
        self,
        request: connectrpc_dot_conformance_dot_v1_dot_service__pb2.ClientStreamRequest,
        *,
        ctx: Optional[ClientContext] = None,
        server_path_prefix: str = "",
        **kwargs,
    ) -> connectrpc_dot_conformance_dot_v1_dot_service__pb2.ClientStreamResponse:
        method = "POST"
        return self._make_request(
            url=f"{server_path_prefix}/connectrpc.conformance.v1.ConformanceService/ClientStream",
            ctx=ctx,
            request=request,
            response_class=connectrpc_dot_conformance_dot_v1_dot_service__pb2.ClientStreamResponse,
            method=method,
            **kwargs,
        )

    def BidiStream(
        self,
        request: connectrpc_dot_conformance_dot_v1_dot_service__pb2.BidiStreamRequest,
        *,
        ctx: Optional[ClientContext] = None,
        server_path_prefix: str = "",
        **kwargs,
    ) -> connectrpc_dot_conformance_dot_v1_dot_service__pb2.BidiStreamResponse:
        method = "POST"
        return self._make_request(
            url=f"{server_path_prefix}/connectrpc.conformance.v1.ConformanceService/BidiStream",
            ctx=ctx,
            request=request,
            response_class=connectrpc_dot_conformance_dot_v1_dot_service__pb2.BidiStreamResponse,
            method=method,
            **kwargs,
        )

    def Unimplemented(
        self,
        request: connectrpc_dot_conformance_dot_v1_dot_service__pb2.UnimplementedRequest,
        *,
        ctx: Optional[ClientContext] = None,
        server_path_prefix: str = "",
        **kwargs,
    ) -> connectrpc_dot_conformance_dot_v1_dot_service__pb2.UnimplementedResponse:
        method = "POST"
        return self._make_request(
            url=f"{server_path_prefix}/connectrpc.conformance.v1.ConformanceService/Unimplemented",
            ctx=ctx,
            request=request,
            response_class=connectrpc_dot_conformance_dot_v1_dot_service__pb2.UnimplementedResponse,
            method=method,
            **kwargs,
        )

    def IdempotentUnary(
        self,
        request: connectrpc_dot_conformance_dot_v1_dot_service__pb2.IdempotentUnaryRequest,
        *,
        ctx: Optional[ClientContext] = None,
        server_path_prefix: str = "",
        use_get: bool = False,
        **kwargs,
    ) -> connectrpc_dot_conformance_dot_v1_dot_service__pb2.IdempotentUnaryResponse:
        method = "GET" if use_get else "POST"
        return self._make_request(
            url=f"{server_path_prefix}/connectrpc.conformance.v1.ConformanceService/IdempotentUnary",
            ctx=ctx,
            request=request,
            response_class=connectrpc_dot_conformance_dot_v1_dot_service__pb2.IdempotentUnaryResponse,
            method=method,
            **kwargs,
        )


class AsyncConformanceServiceClient(AsyncConnecpyClient):
    async def Unary(
        self,
        request: connectrpc_dot_conformance_dot_v1_dot_service__pb2.UnaryRequest,
        *,
        ctx: Optional[ClientContext] = None,
        server_path_prefix: str = "",
        session: Union[httpx.AsyncClient, None] = None,
        **kwargs,
    ) -> connectrpc_dot_conformance_dot_v1_dot_service__pb2.UnaryResponse:
        method = "POST"
        return await self._make_request(
            url=f"{server_path_prefix}/connectrpc.conformance.v1.ConformanceService/Unary",
            ctx=ctx,
            request=request,
            response_class=connectrpc_dot_conformance_dot_v1_dot_service__pb2.UnaryResponse,
            method=method,
            session=session,
            **kwargs,
        )

    async def ServerStream(
        self,
        request: connectrpc_dot_conformance_dot_v1_dot_service__pb2.ServerStreamRequest,
        *,
        ctx: Optional[ClientContext] = None,
        server_path_prefix: str = "",
        session: Union[httpx.AsyncClient, None] = None,
        **kwargs,
    ) -> connectrpc_dot_conformance_dot_v1_dot_service__pb2.ServerStreamResponse:
        method = "POST"
        return await self._make_request(
            url=f"{server_path_prefix}/connectrpc.conformance.v1.ConformanceService/ServerStream",
            ctx=ctx,
            request=request,
            response_class=connectrpc_dot_conformance_dot_v1_dot_service__pb2.ServerStreamResponse,
            method=method,
            session=session,
            **kwargs,
        )

    async def ClientStream(
        self,
        request: connectrpc_dot_conformance_dot_v1_dot_service__pb2.ClientStreamRequest,
        *,
        ctx: Optional[ClientContext] = None,
        server_path_prefix: str = "",
        session: Union[httpx.AsyncClient, None] = None,
        **kwargs,
    ) -> connectrpc_dot_conformance_dot_v1_dot_service__pb2.ClientStreamResponse:
        method = "POST"
        return await self._make_request(
            url=f"{server_path_prefix}/connectrpc.conformance.v1.ConformanceService/ClientStream",
            ctx=ctx,
            request=request,
            response_class=connectrpc_dot_conformance_dot_v1_dot_service__pb2.ClientStreamResponse,
            method=method,
            session=session,
            **kwargs,
        )

    async def BidiStream(
        self,
        request: connectrpc_dot_conformance_dot_v1_dot_service__pb2.BidiStreamRequest,
        *,
        ctx: Optional[ClientContext] = None,
        server_path_prefix: str = "",
        session: Union[httpx.AsyncClient, None] = None,
        **kwargs,
    ) -> connectrpc_dot_conformance_dot_v1_dot_service__pb2.BidiStreamResponse:
        method = "POST"
        return await self._make_request(
            url=f"{server_path_prefix}/connectrpc.conformance.v1.ConformanceService/BidiStream",
            ctx=ctx,
            request=request,
            response_class=connectrpc_dot_conformance_dot_v1_dot_service__pb2.BidiStreamResponse,
            method=method,
            session=session,
            **kwargs,
        )

    async def Unimplemented(
        self,
        request: connectrpc_dot_conformance_dot_v1_dot_service__pb2.UnimplementedRequest,
        *,
        ctx: Optional[ClientContext] = None,
        server_path_prefix: str = "",
        session: Union[httpx.AsyncClient, None] = None,
        **kwargs,
    ) -> connectrpc_dot_conformance_dot_v1_dot_service__pb2.UnimplementedResponse:
        method = "POST"
        return await self._make_request(
            url=f"{server_path_prefix}/connectrpc.conformance.v1.ConformanceService/Unimplemented",
            ctx=ctx,
            request=request,
            response_class=connectrpc_dot_conformance_dot_v1_dot_service__pb2.UnimplementedResponse,
            method=method,
            session=session,
            **kwargs,
        )

    async def IdempotentUnary(
        self,
        request: connectrpc_dot_conformance_dot_v1_dot_service__pb2.IdempotentUnaryRequest,
        *,
        ctx: Optional[ClientContext] = None,
        server_path_prefix: str = "",
        session: Union[httpx.AsyncClient, None] = None,
        use_get: bool = False,
        **kwargs,
    ) -> connectrpc_dot_conformance_dot_v1_dot_service__pb2.IdempotentUnaryResponse:
        method = "GET" if use_get else "POST"
        return await self._make_request(
            url=f"{server_path_prefix}/connectrpc.conformance.v1.ConformanceService/IdempotentUnary",
            ctx=ctx,
            request=request,
            response_class=connectrpc_dot_conformance_dot_v1_dot_service__pb2.IdempotentUnaryResponse,
            method=method,
            session=session,
            **kwargs,
        )
